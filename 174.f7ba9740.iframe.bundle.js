"use strict";(self.webpackChunkreact_my_captcha=self.webpackChunkreact_my_captcha||[]).push([[174],{"./src/components/Captcha/__docs__/Captcha.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,DifferentBackground:()=>DifferentBackground,DifferentFontFamilies:()=>DifferentFontFamilies,DifferentFontSizes:()=>DifferentFontSizes,DifferentLines:()=>DifferentLines,DifferentPoints:()=>DifferentPoints,DifferentSize:()=>DifferentSize,__namedExportsOrder:()=>__namedExportsOrder,default:()=>Captcha_stories});var dist=__webpack_require__("./node_modules/@storybook/addon-actions/dist/index.mjs"),react=__webpack_require__("./node_modules/react/index.js"),index_esm=__webpack_require__("./node_modules/react-hook-form/dist/index.esm.mjs");var Canvas=__webpack_require__("./src/components/Canvas/Canvas.tsx");const arrow_clockwise=__webpack_require__.p+"static/media/arrow-clockwise.58719f1eabfd6f0df4401a3c1ac0c5e2.svg";var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const DefaultButton_DefaultButton=props=>{const className="captcha-reload-button ".concat(props.className||"");return(0,jsx_runtime.jsx)("button",{...props,className,type:"button",children:(0,jsx_runtime.jsx)("img",{className:"captcha-reload-arrow",src:arrow_clockwise,alt:""})})};DefaultButton_DefaultButton.__docgenInfo={description:"",methods:[],displayName:"DefaultButton"};const Captcha_Captcha=props=>{const{onCaptchaRefresh,onCaptchaValidate,onInputChange,minLength=4,maxLength=5,textInput,refreshButton,...configProps}=props,[captchaText,setCaptchaText]=(0,react.useState)(""),generateCaptcha=()=>{const result=function generateRandomText(minLength,maxLength){const characters="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";let result="";const captchaLength=Math.max(minLength,Math.floor(Math.random()*(Math.min(maxLength,62)-1+1))+1);for(let i=0;i<captchaLength;i++)result+=characters.charAt(Math.floor(62*Math.random()));return result}(minLength,maxLength);setCaptchaText(result),onCaptchaValidate&&onCaptchaValidate(!1),onCaptchaRefresh&&onCaptchaRefresh(result)};(0,react.useEffect)((()=>{generateCaptcha()}),[]);let enhancedTextInput=null;if(react.isValidElement(textInput)){const existingOnChange=textInput.props.onChange,mergedOnChange=e=>{(e=>{const newValue=e.target.value;onInputChange&&onInputChange(newValue),onCaptchaValidate&&onCaptchaValidate(newValue===captchaText)})(e),existingOnChange&&existingOnChange(e)};enhancedTextInput=react.cloneElement(textInput,{onChange:mergedOnChange})}return(0,jsx_runtime.jsxs)("div",{className:"captcha-container ".concat(props.className),children:[(0,jsx_runtime.jsxs)("div",{className:"captcha-main",children:[(0,jsx_runtime.jsx)(Canvas.H,{captchaText,...configProps}),(0,jsx_runtime.jsx)("div",{className:"captcha-button-control",children:react.isValidElement(refreshButton)?react.cloneElement(refreshButton,{onClick:generateCaptcha}):(0,jsx_runtime.jsx)(DefaultButton_DefaultButton,{onClick:generateCaptcha})})]}),(0,jsx_runtime.jsx)("div",{className:"captcha-text-control",children:enhancedTextInput})]})};Captcha_Captcha.displayName="Captcha",Captcha_Captcha.__docgenInfo={description:"",methods:[],displayName:"Captcha",props:{width:{required:!1,tsType:{name:"number"},description:"Width of the captcha canvas."},height:{required:!1,tsType:{name:"number"},description:"Height of the captcha canvas."},backgroundColor:{required:!1,tsType:{name:"string"},description:"Background color of the captcha canvas."},minPoints:{required:!1,tsType:{name:"number"},description:"Minimum number of points to be drawn on the captcha."},maxPoints:{required:!1,tsType:{name:"number"},description:"Maximum number of points to be drawn on the captcha."},minLines:{required:!1,tsType:{name:"number"},description:"Minimum number of lines to be drawn on the captcha."},maxLines:{required:!1,tsType:{name:"number"},description:"Maximum number of lines to be drawn on the captcha."},fontFamilies:{required:!1,tsType:{name:"Array",elements:[{name:"string"}],raw:"string[]"},description:"Array of font families for the captcha text."},minFontSize:{required:!1,tsType:{name:"number"},description:"Minimum font size for the captcha text."},maxFontSize:{required:!1,tsType:{name:"number"},description:"Maximum font size for the captcha text."},className:{required:!1,tsType:{name:"string"},description:"Additional class name for the captcha component."},maxLength:{required:!1,tsType:{name:"number"},description:"Maximum length for the captcha input."},minLength:{required:!1,tsType:{name:"number"},description:"Minimum length for the captcha input."},onCaptchaRefresh:{required:!1,tsType:{name:"signature",type:"function",raw:"(captchaText: string) => void",signature:{arguments:[{type:{name:"string"},name:"captchaText"}],return:{name:"void"}}},description:"Callback function triggered on captcha refresh."},onInputChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(inputValue: string) => void",signature:{arguments:[{type:{name:"string"},name:"inputValue"}],return:{name:"void"}}},description:"Callback function triggered on input change."},onCaptchaValidate:{required:!1,tsType:{name:"signature",type:"function",raw:"(isValid: boolean) => void",signature:{arguments:[{type:{name:"boolean"},name:"isValid"}],return:{name:"void"}}},description:"Callback function triggered when captcha validation occurs."},refreshButton:{required:!1,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:"Refresh button as a React node."},textInput:{required:!1,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:"Input control to write captcha."}}};const CaptchaExample=props=>{const{register,reset,handleSubmit,formState:{errors}}=(0,index_esm.mN)(),{validate,isCaptchaValid,onCaptchaRefresh,onInputChange}=(()=>{const[isCaptchaValid,setIsCaptchaValid]=(0,react.useState)(!0),[captchaText,setCaptchaText]=(0,react.useState)("");return{isCaptchaValid,onInputChange(text){!isCaptchaValid&&""===text&&setIsCaptchaValid(!0)},onCaptchaRefresh(text){setCaptchaText(text),setIsCaptchaValid(!0)},validate(currentText){const result=currentText===captchaText;return setIsCaptchaValid(result),result}}})();return(0,jsx_runtime.jsxs)("form",{onSubmit:handleSubmit((data=>{validate(data.captcha)?(console.log(data),console.info("Form is sent")):console.error("Captcha is invalid")})),className:"form-group",children:[(0,jsx_runtime.jsx)("input",{...register("email",{required:"Email is required",pattern:/^\S+@\S+$/i}),className:"form-control mt-3",placeholder:"Email"}),errors.email&&"string"==typeof errors.email.message&&(0,jsx_runtime.jsx)("div",{className:"invalid-feedback",style:{display:"block"},children:errors.email.message}),(0,jsx_runtime.jsx)(Captcha_Captcha,{...props,className:"mt-3",onCaptchaRefresh:text=>{onCaptchaRefresh(text),props.onCaptchaRefresh&&props.onCaptchaRefresh(text),reset({captcha:""})},onInputChange,onCaptchaValidate:props.onCaptchaValidate,textInput:(0,jsx_runtime.jsx)("input",{...register("captcha",{required:"Captcha is required"}),className:"form-control mt-3",placeholder:"Captcha"})}),errors.captcha&&"string"==typeof errors.captcha.message&&(0,jsx_runtime.jsx)("div",{className:"invalid-feedback",style:{display:"block"},children:errors.captcha.message}),!isCaptchaValid&&(0,jsx_runtime.jsx)("div",{className:"invalid-feedback",style:{display:"block"},children:"Captcha is invalid"}),(0,jsx_runtime.jsx)("button",{type:"submit",className:"btn btn-primary mt-3",children:"Submit"})]})};CaptchaExample.__docgenInfo={description:"",methods:[],displayName:"CaptchaExample",props:{width:{required:!1,tsType:{name:"number"},description:"Width of the captcha canvas."},height:{required:!1,tsType:{name:"number"},description:"Height of the captcha canvas."},backgroundColor:{required:!1,tsType:{name:"string"},description:"Background color of the captcha canvas."},minPoints:{required:!1,tsType:{name:"number"},description:"Minimum number of points to be drawn on the captcha."},maxPoints:{required:!1,tsType:{name:"number"},description:"Maximum number of points to be drawn on the captcha."},minLines:{required:!1,tsType:{name:"number"},description:"Minimum number of lines to be drawn on the captcha."},maxLines:{required:!1,tsType:{name:"number"},description:"Maximum number of lines to be drawn on the captcha."},fontFamilies:{required:!1,tsType:{name:"Array",elements:[{name:"string"}],raw:"string[]"},description:"Array of font families for the captcha text."},minFontSize:{required:!1,tsType:{name:"number"},description:"Minimum font size for the captcha text."},maxFontSize:{required:!1,tsType:{name:"number"},description:"Maximum font size for the captcha text."},className:{required:!1,tsType:{name:"string"},description:"Additional class name for the captcha component."},maxLength:{required:!1,tsType:{name:"number"},description:"Maximum length for the captcha input."},minLength:{required:!1,tsType:{name:"number"},description:"Minimum length for the captcha input."},onCaptchaRefresh:{required:!1,tsType:{name:"signature",type:"function",raw:"(captchaText: string) => void",signature:{arguments:[{type:{name:"string"},name:"captchaText"}],return:{name:"void"}}},description:"Callback function triggered on captcha refresh."},onInputChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(inputValue: string) => void",signature:{arguments:[{type:{name:"string"},name:"inputValue"}],return:{name:"void"}}},description:"Callback function triggered on input change."},onCaptchaValidate:{required:!1,tsType:{name:"signature",type:"function",raw:"(isValid: boolean) => void",signature:{arguments:[{type:{name:"boolean"},name:"isValid"}],return:{name:"void"}}},description:"Callback function triggered when captcha validation occurs."},refreshButton:{required:!1,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:"Refresh button as a React node."},textInput:{required:!1,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:"Input control to write captcha."}}};const Captcha_stories={title:"components/Captcha",component:CaptchaExample},Default={args:{onCaptchaRefresh:(0,dist.XI)("Captcha refreshed"),onCaptchaValidate:(0,dist.XI)("Captcha validated"),width:200,height:50,backgroundColor:"#ffffff",minPoints:10,maxPoints:20,minLines:3,maxLines:5,fontFamilies:["Arial","Verdana","Courier New","Georgia"],minFontSize:20,maxFontSize:30}},DifferentBackground={args:{...Default.args,backgroundColor:"#D3D3D3"}},DifferentSize={args:{...Default.args,width:300,height:100}},DifferentPoints={args:{...Default.args,minPoints:80,maxPoints:100}},DifferentLines={args:{...Default.args,minLines:20,maxLines:30}},DifferentFontFamilies={args:{...Default.args,fontFamilies:["Times New Roman","Comic Sans MS"]}},DifferentFontSizes={args:{...Default.args,minFontSize:15,maxFontSize:45}},__namedExportsOrder=["Default","DifferentBackground","DifferentSize","DifferentPoints","DifferentLines","DifferentFontFamilies","DifferentFontSizes"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  args: {\n    onCaptchaRefresh: action("Captcha refreshed"),\n    onCaptchaValidate: action("Captcha validated"),\n    width: 200,\n    height: 50,\n    backgroundColor: "#ffffff",\n    minPoints: 10,\n    maxPoints: 20,\n    minLines: 3,\n    maxLines: 5,\n    fontFamilies: ["Arial", "Verdana", "Courier New", "Georgia"],\n    minFontSize: 20,\n    maxFontSize: 30\n  }\n}',...Default.parameters?.docs?.source}}},DifferentBackground.parameters={...DifferentBackground.parameters,docs:{...DifferentBackground.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...Default.args,\n    backgroundColor: "#D3D3D3" // Light Gray\n  }\n}',...DifferentBackground.parameters?.docs?.source}}},DifferentSize.parameters={...DifferentSize.parameters,docs:{...DifferentSize.parameters?.docs,source:{originalSource:"{\n  args: {\n    ...Default.args,\n    width: 300,\n    height: 100\n  }\n}",...DifferentSize.parameters?.docs?.source}}},DifferentPoints.parameters={...DifferentPoints.parameters,docs:{...DifferentPoints.parameters?.docs,source:{originalSource:"{\n  args: {\n    ...Default.args,\n    minPoints: 80,\n    maxPoints: 100\n  }\n}",...DifferentPoints.parameters?.docs?.source}}},DifferentLines.parameters={...DifferentLines.parameters,docs:{...DifferentLines.parameters?.docs,source:{originalSource:"{\n  args: {\n    ...Default.args,\n    minLines: 20,\n    maxLines: 30\n  }\n}",...DifferentLines.parameters?.docs?.source}}},DifferentFontFamilies.parameters={...DifferentFontFamilies.parameters,docs:{...DifferentFontFamilies.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...Default.args,\n    fontFamilies: ["Times New Roman", "Comic Sans MS"]\n  }\n}',...DifferentFontFamilies.parameters?.docs?.source}}},DifferentFontSizes.parameters={...DifferentFontSizes.parameters,docs:{...DifferentFontSizes.parameters?.docs,source:{originalSource:"{\n  args: {\n    ...Default.args,\n    minFontSize: 15,\n    maxFontSize: 45\n  }\n}",...DifferentFontSizes.parameters?.docs?.source}}}},"./src/components/Canvas/Canvas.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{H:()=>Canvas});var react=__webpack_require__("./node_modules/react/index.js");function hexToRgb(hex){hex=hex.replace(/^#/,"");const bigint=parseInt(hex,16);return[bigint>>16&255,bigint>>8&255,255&bigint]}function rgbToLuminance(rgb){const[r,g,b]=rgb,a=[r,g,b].map((function(v){return(v/=255)<=.03928?v/12.92:Math.pow((v+.055)/1.055,2.4)}));return.2126*a[0]+.7152*a[1]+.0722*a[2]}function getContrastRatio(foreground,background){const rgbForeground=hexToRgb(foreground),rgbBackground=hexToRgb(background),luminanceForeground=rgbToLuminance(rgbForeground),luminanceBackground=rgbToLuminance(rgbBackground);return(Math.max(luminanceForeground,luminanceBackground)+.05)/(Math.min(luminanceForeground,luminanceBackground)+.05)}function getRandomColor(backgroundColor){let contrastRatio=0;let color=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"#FFFFFF";for(;contrastRatio<3;){const r=Math.floor(256*Math.random()),g=Math.floor(256*Math.random()),b=Math.floor(256*Math.random());color="#".concat(r.toString(16).padStart(2,"0")).concat(g.toString(16).padStart(2,"0")).concat(b.toString(16).padStart(2,"0")),contrastRatio=getContrastRatio(color,backgroundColor)}return color}var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const Canvas=props=>{const{captchaText,backgroundColor="#ffffff",width=200,height=50,minPoints=10,maxPoints=20,minLines=3,maxLines=5,fontFamilies=["Arial","Verdana","Courier New","Georgia"],minFontSize=20,maxFontSize=30}=props,canvasRef=(0,react.useRef)(null);return(0,react.useEffect)((()=>{const canvas=canvasRef.current;canvas&&(!function drawTextRandomly(canvas,text,backgroundColor,fontFamilies,minFontSize,maxFontSize){const ctx=canvas.getContext("2d");if(ctx){ctx.clearRect(0,0,canvas.width,canvas.height),ctx.fillStyle=backgroundColor,ctx.fillRect(0,0,canvas.width,canvas.height);const margin=Math.min(.1*canvas.width,20),characterWidth=(canvas.width-margin)/text.length;let offsetX=10;const verticalCenter=canvas.height/2;text.split("").forEach((char=>{const randomFont=fontFamilies[Math.floor(Math.random()*fontFamilies.length)],fontSize=Math.floor(Math.random()*(maxFontSize-minFontSize+1))+minFontSize;ctx.font="".concat(fontSize,"px ").concat(randomFont);const charWidth=ctx.measureText(char).width,charOffsetX=offsetX+(characterWidth-charWidth)/2;ctx.fillStyle=getRandomColor(backgroundColor),ctx.save();const rotation=.8*Math.random()-.4;ctx.translate(charOffsetX+charWidth/2,verticalCenter),ctx.rotate(rotation),ctx.fillText(char,-charWidth/2,fontSize/2-.1*canvas.height),ctx.restore(),offsetX+=characterWidth}))}}(canvas,captchaText,backgroundColor,fontFamilies,minFontSize,maxFontSize),function drawRandomPoints(canvas,backgroundColor,minPoints,maxPoints){const pointsCount=Math.floor(Math.random()*(maxPoints-minPoints+1))+minPoints,ctx=canvas.getContext("2d");if(ctx)for(let i=0;i<pointsCount;i++){const x=Math.floor(Math.random()*canvas.width),y=Math.floor(Math.random()*canvas.height),color=getRandomColor(backgroundColor);ctx.beginPath(),ctx.arc(x,y,1,0,2*Math.PI),ctx.fillStyle=color,ctx.fill()}}(canvas,backgroundColor,minPoints,maxPoints),function drawRandomLines(canvas,backgroundColor,minLines,maxLines){const linesCount=Math.floor(Math.random()*(maxLines-minLines+1))+minLines,ctx=canvas.getContext("2d");if(ctx)for(let i=0;i<linesCount;i++){const startX=Math.floor(Math.random()*canvas.width),startY=Math.floor(Math.random()*canvas.height),endX=Math.floor(Math.random()*canvas.width),endY=Math.floor(Math.random()*canvas.height),color=getRandomColor(backgroundColor);ctx.beginPath(),ctx.moveTo(startX,startY),ctx.lineTo(endX,endY),ctx.strokeStyle=color,ctx.stroke()}}(canvas,backgroundColor,minLines,maxLines))}),[captchaText,backgroundColor,width,height,minPoints,maxPoints,minLines,maxLines,fontFamilies,minFontSize,maxFontSize]),(0,jsx_runtime.jsx)("canvas",{className:"captcha-canvas",ref:canvasRef,width,height})};Canvas.displayName="Canvas",Canvas.__docgenInfo={description:"",methods:[],displayName:"Canvas",props:{width:{required:!1,tsType:{name:"number"},description:"Width of the captcha canvas."},height:{required:!1,tsType:{name:"number"},description:"Height of the captcha canvas."},backgroundColor:{required:!1,tsType:{name:"string"},description:"Background color of the captcha canvas."},minPoints:{required:!1,tsType:{name:"number"},description:"Minimum number of points to be drawn on the captcha."},maxPoints:{required:!1,tsType:{name:"number"},description:"Maximum number of points to be drawn on the captcha."},minLines:{required:!1,tsType:{name:"number"},description:"Minimum number of lines to be drawn on the captcha."},maxLines:{required:!1,tsType:{name:"number"},description:"Maximum number of lines to be drawn on the captcha."},fontFamilies:{required:!1,tsType:{name:"Array",elements:[{name:"string"}],raw:"string[]"},description:"Array of font families for the captcha text."},minFontSize:{required:!1,tsType:{name:"number"},description:"Minimum font size for the captcha text."},maxFontSize:{required:!1,tsType:{name:"number"},description:"Maximum font size for the captcha text."},captchaText:{required:!0,tsType:{name:"string"},description:"Text to be drawn on the captcha canvas."}}}}}]);